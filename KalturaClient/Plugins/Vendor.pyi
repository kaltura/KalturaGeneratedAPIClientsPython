# ===================================================================================================
#                           _  __     _ _
#                          | |/ /__ _| | |_ _  _ _ _ __ _
#                          | ' </ _` | |  _| || | '_/ _` |
#                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
#
# This file is part of the Kaltura Collaborative Media Suite which allows users
# to do with audio, video, and animation what Wiki platforms allow them to do with
# text.
#
# Copyright (C) 2006-2023  Kaltura Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.
#
# @ignore
# ===================================================================================================
from typing import List, IO, Any
from .Core import *
from KalturaClient.Base import KalturaObjectBase, KalturaServiceBase

class KalturaHandleParticipantsMode(object):
    ADD_AS_CO_PUBLISHERS = 0
    ADD_AS_CO_VIEWERS = 1
    IGNORE = 2
    ADD_AS_CO_EDITORS = 3
    ADD_AS_CO_EDITORS_CO_PUBLISHERS = 4

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaRecordingFileType(object):
    UNDEFINED = 0
    VIDEO = 1
    CHAT = 2
    TRANSCRIPT = 3
    AUDIO = 4
    CC = 5

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaRecordingType(object):
    MEETING = 0
    WEBINAR = 1

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaVendorIntegrationStatus(object):
    DISABLED = 1
    ACTIVE = 2
    DELETED = 3

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaZoomUsersMatching(object):
    DO_NOT_MODIFY = 0
    ADD_POSTFIX = 1
    REMOVE_POSTFIX = 2
    CMS_MATCHING = 3

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaEndpointValidationResponse(KalturaObjectBase):
    plainToken: str
    encryptedToken: str
    def __init__(self,
            plainToken: str = NotImplemented,
            encryptedToken: str = NotImplemented): ...

    def getPlainToken(self) -> str: ...
    def setPlainToken(self, newPlainToken: str) -> None: ...
    def getEncryptedToken(self) -> str: ...
    def setEncryptedToken(self, newEncryptedToken: str) -> None: ...

class KalturaIntegrationSetting(KalturaObjectBase):
    id: int
    status: KalturaVendorIntegrationStatus
    defaultUserId: str
    accountId: str
    createUserIfNotExist: KalturaNullableBoolean
    conversionProfileId: int
    handleParticipantsMode: KalturaHandleParticipantsMode
    deletionPolicy: KalturaNullableBoolean
    createdAt: str
    updatedAt: str
    partnerId: int
    enableMeetingUpload: KalturaNullableBoolean
    enableMeetingChat: KalturaNullableBoolean
    def __init__(self,
            id: int = NotImplemented,
            status: KalturaVendorIntegrationStatus = NotImplemented,
            defaultUserId: str = NotImplemented,
            accountId: str = NotImplemented,
            createUserIfNotExist: KalturaNullableBoolean = NotImplemented,
            conversionProfileId: int = NotImplemented,
            handleParticipantsMode: KalturaHandleParticipantsMode = NotImplemented,
            deletionPolicy: KalturaNullableBoolean = NotImplemented,
            createdAt: str = NotImplemented,
            updatedAt: str = NotImplemented,
            partnerId: int = NotImplemented,
            enableMeetingUpload: KalturaNullableBoolean = NotImplemented,
            enableMeetingChat: KalturaNullableBoolean = NotImplemented): ...

    def getId(self) -> int: ...
    def getStatus(self) -> KalturaVendorIntegrationStatus: ...
    def getDefaultUserId(self) -> str: ...
    def setDefaultUserId(self, newDefaultUserId: str) -> None: ...
    def getAccountId(self) -> str: ...
    def getCreateUserIfNotExist(self) -> KalturaNullableBoolean: ...
    def setCreateUserIfNotExist(self, newCreateUserIfNotExist: KalturaNullableBoolean) -> None: ...
    def getConversionProfileId(self) -> int: ...
    def setConversionProfileId(self, newConversionProfileId: int) -> None: ...
    def getHandleParticipantsMode(self) -> KalturaHandleParticipantsMode: ...
    def setHandleParticipantsMode(self, newHandleParticipantsMode: KalturaHandleParticipantsMode) -> None: ...
    def getDeletionPolicy(self) -> KalturaNullableBoolean: ...
    def setDeletionPolicy(self, newDeletionPolicy: KalturaNullableBoolean) -> None: ...
    def getCreatedAt(self) -> str: ...
    def getUpdatedAt(self) -> str: ...
    def getPartnerId(self) -> int: ...
    def getEnableMeetingUpload(self) -> KalturaNullableBoolean: ...
    def setEnableMeetingUpload(self, newEnableMeetingUpload: KalturaNullableBoolean) -> None: ...
    def getEnableMeetingChat(self) -> KalturaNullableBoolean: ...
    def setEnableMeetingChat(self, newEnableMeetingChat: KalturaNullableBoolean) -> None: ...

class KalturaZoomIntegrationSetting(KalturaIntegrationSetting):
    zoomCategory: str
    enableRecordingUpload: KalturaNullableBoolean
    zoomUserMatchingMode: KalturaZoomUsersMatching
    zoomUserPostfix: str
    zoomWebinarCategory: str
    enableWebinarUploads: KalturaNullableBoolean
    enableZoomTranscription: KalturaNullableBoolean
    zoomAccountDescription: str
    optOutGroupNames: str
    optInGroupNames: str
    groupParticipationType: KalturaZoomGroupParticipationType
    handleCohostsMode: KalturaHandleParticipantsMode
    handleAlternativeHostsMode: KalturaHandleParticipantsMode
    def __init__(self,
            id: int = NotImplemented,
            status: KalturaVendorIntegrationStatus = NotImplemented,
            defaultUserId: str = NotImplemented,
            accountId: str = NotImplemented,
            createUserIfNotExist: KalturaNullableBoolean = NotImplemented,
            conversionProfileId: int = NotImplemented,
            handleParticipantsMode: KalturaHandleParticipantsMode = NotImplemented,
            deletionPolicy: KalturaNullableBoolean = NotImplemented,
            createdAt: str = NotImplemented,
            updatedAt: str = NotImplemented,
            partnerId: int = NotImplemented,
            enableMeetingUpload: KalturaNullableBoolean = NotImplemented,
            enableMeetingChat: KalturaNullableBoolean = NotImplemented,
            zoomCategory: str = NotImplemented,
            enableRecordingUpload: KalturaNullableBoolean = NotImplemented,
            zoomUserMatchingMode: KalturaZoomUsersMatching = NotImplemented,
            zoomUserPostfix: str = NotImplemented,
            zoomWebinarCategory: str = NotImplemented,
            enableWebinarUploads: KalturaNullableBoolean = NotImplemented,
            enableZoomTranscription: KalturaNullableBoolean = NotImplemented,
            zoomAccountDescription: str = NotImplemented,
            optOutGroupNames: str = NotImplemented,
            optInGroupNames: str = NotImplemented,
            groupParticipationType: KalturaZoomGroupParticipationType = NotImplemented,
            handleCohostsMode: KalturaHandleParticipantsMode = NotImplemented,
            handleAlternativeHostsMode: KalturaHandleParticipantsMode = NotImplemented): ...

    def getZoomCategory(self) -> str: ...
    def setZoomCategory(self, newZoomCategory: str) -> None: ...
    def getEnableRecordingUpload(self) -> KalturaNullableBoolean: ...
    def setEnableRecordingUpload(self, newEnableRecordingUpload: KalturaNullableBoolean) -> None: ...
    def getZoomUserMatchingMode(self) -> KalturaZoomUsersMatching: ...
    def setZoomUserMatchingMode(self, newZoomUserMatchingMode: KalturaZoomUsersMatching) -> None: ...
    def getZoomUserPostfix(self) -> str: ...
    def setZoomUserPostfix(self, newZoomUserPostfix: str) -> None: ...
    def getZoomWebinarCategory(self) -> str: ...
    def setZoomWebinarCategory(self, newZoomWebinarCategory: str) -> None: ...
    def getEnableWebinarUploads(self) -> KalturaNullableBoolean: ...
    def setEnableWebinarUploads(self, newEnableWebinarUploads: KalturaNullableBoolean) -> None: ...
    def getEnableZoomTranscription(self) -> KalturaNullableBoolean: ...
    def setEnableZoomTranscription(self, newEnableZoomTranscription: KalturaNullableBoolean) -> None: ...
    def getZoomAccountDescription(self) -> str: ...
    def setZoomAccountDescription(self, newZoomAccountDescription: str) -> None: ...
    def getOptOutGroupNames(self) -> str: ...
    def setOptOutGroupNames(self, newOptOutGroupNames: str) -> None: ...
    def getOptInGroupNames(self) -> str: ...
    def setOptInGroupNames(self, newOptInGroupNames: str) -> None: ...
    def getGroupParticipationType(self) -> KalturaZoomGroupParticipationType: ...
    def setGroupParticipationType(self, newGroupParticipationType: KalturaZoomGroupParticipationType) -> None: ...
    def getHandleCohostsMode(self) -> KalturaHandleParticipantsMode: ...
    def setHandleCohostsMode(self, newHandleCohostsMode: KalturaHandleParticipantsMode) -> None: ...
    def getHandleAlternativeHostsMode(self) -> KalturaHandleParticipantsMode: ...
    def setHandleAlternativeHostsMode(self, newHandleAlternativeHostsMode: KalturaHandleParticipantsMode) -> None: ...

class KalturaZoomIntegrationSettingResponse(KalturaListResponse):
    objects: List[KalturaZoomIntegrationSetting]
    def __init__(self,
            totalCount: int = NotImplemented,
            objects: List[KalturaZoomIntegrationSetting] = NotImplemented): ...

    def getObjects(self) -> List[KalturaZoomIntegrationSetting]: ...

class KalturaZoomVendorService(KalturaServiceBase):
    def deAuthorization(self) -> str: ...
    def fetchRegistrationPage(self, tokensData: str, iv: str) -> None: ...
    def get(self, partnerId: int) -> KalturaZoomIntegrationSetting: ...
    def list(self, pager: KalturaFilterPager = NotImplemented) -> KalturaZoomIntegrationSettingResponse: ...
    def localRegistrationPage(self, zoomAccountId: str) -> None: ...
    def oauthValidation(self) -> None: ...
    def preOauthValidation(self) -> str: ...
    def recordingComplete(self) -> KalturaEndpointValidationResponse: ...
    def submitRegistration(self, accountId: str, integrationSetting: KalturaZoomIntegrationSetting) -> str: ...

class KalturaVendorIntegrationService(KalturaServiceBase):
    def add(self, integration: KalturaIntegrationSetting, remoteId: str) -> KalturaIntegrationSetting: ...
    def delete(self, integrationId: int) -> KalturaIntegrationSetting: ...
    def get(self, integrationId: int) -> KalturaIntegrationSetting: ...
    def update(self, id: int, integrationSetting: KalturaIntegrationSetting) -> KalturaIntegrationSetting: ...
    def updateStatus(self, id: int, status: int) -> KalturaIntegrationSetting: ...

class KalturaVendorClientPluginServicesProxy:
    zoomVendor: KalturaZoomVendorService
    vendorIntegration: KalturaVendorIntegrationService