# ===================================================================================================
#                           _  __     _ _
#                          | |/ /__ _| | |_ _  _ _ _ __ _
#                          | ' </ _` | |  _| || | '_/ _` |
#                          |_|\_\__,_|_|\__|\_,_|_| \__,_|
#
# This file is part of the Kaltura Collaborative Media Suite which allows users
# to do with audio, video, and animation what Wiki platforms allow them to do with
# text.
#
# Copyright (C) 2006-2023  Kaltura Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http:#www.gnu.org/licenses/>.
#
# @ignore
# ===================================================================================================
from typing import List, IO, Any
from .Core import *
from KalturaClient.Base import KalturaObjectBase, KalturaServiceBase

class KalturaSsoStatus(object):
    DISABLED = 1
    ACTIVE = 2
    DELETED = 3

    def __init__(self, value: int): ...

    def getValue(self) -> int: ...

class KalturaSso(KalturaObjectBase):
    id: int
    applicationType: str
    partnerId: int
    domain: str
    status: KalturaSsoStatus
    createdAt: int
    updatedAt: int
    redirectUrl: str
    data: str
    def __init__(self,
            id: int = NotImplemented,
            applicationType: str = NotImplemented,
            partnerId: int = NotImplemented,
            domain: str = NotImplemented,
            status: KalturaSsoStatus = NotImplemented,
            createdAt: int = NotImplemented,
            updatedAt: int = NotImplemented,
            redirectUrl: str = NotImplemented,
            data: str = NotImplemented): ...

    def getId(self) -> int: ...
    def getApplicationType(self) -> str: ...
    def setApplicationType(self, newApplicationType: str) -> None: ...
    def getPartnerId(self) -> int: ...
    def setPartnerId(self, newPartnerId: int) -> None: ...
    def getDomain(self) -> str: ...
    def setDomain(self, newDomain: str) -> None: ...
    def getStatus(self) -> KalturaSsoStatus: ...
    def setStatus(self, newStatus: KalturaSsoStatus) -> None: ...
    def getCreatedAt(self) -> int: ...
    def getUpdatedAt(self) -> int: ...
    def getRedirectUrl(self) -> str: ...
    def setRedirectUrl(self, newRedirectUrl: str) -> None: ...
    def getData(self) -> str: ...
    def setData(self, newData: str) -> None: ...

class KalturaSsoListResponse(KalturaListResponse):
    objects: List[KalturaSso]
    def __init__(self,
            totalCount: int = NotImplemented,
            objects: List[KalturaSso] = NotImplemented): ...

    def getObjects(self) -> List[KalturaSso]: ...

class KalturaSsoBaseFilter(KalturaRelatedFilter):
    idEqual: int
    idIn: str
    applicationTypeEqual: str
    partnerIdEqual: int
    domainEqual: str
    statusEqual: KalturaSsoStatus
    statusIn: str
    createdAtGreaterThanOrEqual: int
    createdAtLessThanOrEqual: int
    redirectUrlEqual: str
    def __init__(self,
            orderBy: str = NotImplemented,
            advancedSearch: KalturaSearchItem = NotImplemented,
            idEqual: int = NotImplemented,
            idIn: str = NotImplemented,
            applicationTypeEqual: str = NotImplemented,
            partnerIdEqual: int = NotImplemented,
            domainEqual: str = NotImplemented,
            statusEqual: KalturaSsoStatus = NotImplemented,
            statusIn: str = NotImplemented,
            createdAtGreaterThanOrEqual: int = NotImplemented,
            createdAtLessThanOrEqual: int = NotImplemented,
            redirectUrlEqual: str = NotImplemented): ...

    def getIdEqual(self) -> int: ...
    def setIdEqual(self, newIdEqual: int) -> None: ...
    def getIdIn(self) -> str: ...
    def setIdIn(self, newIdIn: str) -> None: ...
    def getApplicationTypeEqual(self) -> str: ...
    def setApplicationTypeEqual(self, newApplicationTypeEqual: str) -> None: ...
    def getPartnerIdEqual(self) -> int: ...
    def setPartnerIdEqual(self, newPartnerIdEqual: int) -> None: ...
    def getDomainEqual(self) -> str: ...
    def setDomainEqual(self, newDomainEqual: str) -> None: ...
    def getStatusEqual(self) -> KalturaSsoStatus: ...
    def setStatusEqual(self, newStatusEqual: KalturaSsoStatus) -> None: ...
    def getStatusIn(self) -> str: ...
    def setStatusIn(self, newStatusIn: str) -> None: ...
    def getCreatedAtGreaterThanOrEqual(self) -> int: ...
    def setCreatedAtGreaterThanOrEqual(self, newCreatedAtGreaterThanOrEqual: int) -> None: ...
    def getCreatedAtLessThanOrEqual(self) -> int: ...
    def setCreatedAtLessThanOrEqual(self, newCreatedAtLessThanOrEqual: int) -> None: ...
    def getRedirectUrlEqual(self) -> str: ...
    def setRedirectUrlEqual(self, newRedirectUrlEqual: str) -> None: ...

class KalturaSsoFilter(KalturaSsoBaseFilter):
    def __init__(self,
            orderBy: str = NotImplemented,
            advancedSearch: KalturaSearchItem = NotImplemented,
            idEqual: int = NotImplemented,
            idIn: str = NotImplemented,
            applicationTypeEqual: str = NotImplemented,
            partnerIdEqual: int = NotImplemented,
            domainEqual: str = NotImplemented,
            statusEqual: KalturaSsoStatus = NotImplemented,
            statusIn: str = NotImplemented,
            createdAtGreaterThanOrEqual: int = NotImplemented,
            createdAtLessThanOrEqual: int = NotImplemented,
            redirectUrlEqual: str = NotImplemented): ...
        pass

class KalturaSsoService(KalturaServiceBase):
    def add(self, sso: KalturaSso) -> KalturaSso: ...
    def delete(self, ssoId: int) -> KalturaSso: ...
    def get(self, ssoId: int) -> KalturaSso: ...
    def list(self, filter: KalturaSsoFilter = NotImplemented, pager: KalturaFilterPager = NotImplemented) -> KalturaSsoListResponse: ...
    def login(self, userId: str, applicationType: str, partnerId: int = NotImplemented) -> str: ...
    def update(self, ssoId: int, sso: KalturaSso) -> KalturaSso: ...

class KalturaSsoClientPluginServicesProxy:
    sso: KalturaSsoService